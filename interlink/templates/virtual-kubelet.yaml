apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.nodeName }}-node 
  namespace: {{ .Release.Namespace}} 
  labels:
    app: {{ .Values.nodeName }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.nodeName }}
  template:
    metadata:
      labels:
        app: {{ .Values.nodeName }} 
    spec:
      automountServiceAccountToken: true
      serviceAccountName: {{ .Values.nodeName }} 
      containers:
      {{- if .Values.plugin.enabled }}
      - name: plugin 
        image: "{{ .Values.plugin.image }}"
        imagePullPolicy: Always
        commands: {{ .Values.plugin.commands }} 
        args: {{ .Values.plugin.args }} 
        env:
          - name: INTERLINKCONFIGPATH
            value: "/etc/interlink/plugin.yaml"
        volumeMounts:
          - name: il-config mountPath: /etc/interlink/plugin.yaml
            subPath: plugin.yaml
          - name: sockets
            mountPath: /var/run/
      {{- end }}
      {{- if .Values.interlink.socket }}
      - name: interlink
        image: "{{ .Values.interlink.image }}"
        imagePullPolicy: Always
        env:
          - name: INTERLINKCONFIGPATH
            value: "/etc/interlink/InterLinkConfig.yaml"
        volumeMounts:
          - name: il-config
            mountPath: /etc/interlink/InterLinkConfig.yaml
            subPath: InterLinkConfig.yaml
          - name: sockets
            mountPath: /var/run/
      {{- end }}
      - name: vk
        image: {{ .Values.virtualNode.image }} 
        imagePullPolicy: Always
        env:
        - name: NODENAME
          value: {{ .Values.nodeName }} 
        - name: KUBELET_PORT
          value: "10250"
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: CONFIGPATH
          value: "/etc/interlink/InterLinkConfig.yaml"
        - name: VKTOKENFILE
          value: "/opt/interlink/token"
        {{- if .Values.virtualNode.HTTPProxies.HTTP }}
        - name: HTTP_PROXY
          value: {{ .Values.virtualNode.HTTPProxies.HTTP }}
        {{- end }}
        {{- if .Values.virtualNode.HTTPProxies.HTTPs }}
        - name: HTTPS_PROXY
          value: {{ .Values.virtualNode.HTTPProxies.HTTPs }}
        {{- end }}
        volumeMounts:
        - name: config
          mountPath: /etc/interlink/InterLinkConfig.yaml
          subPath: InterLinkConfig.yaml
        - name: token
          mountPath: /opt/interlink
      {{- if .Values.interlink.socket }}
        - name: sockets
          mountPath: /var/run/
      {{- else }}
      - name: refresh-token
        image: "{{ .Values.OAUTH.image }}"
        imagePullPolicy: Always
        env:
        - name: IAM_TOKEN_ENDPOINT 
          value: {{.Values.OAUTH.TokenURL}} 
        # TODO load env IAM client from secret
        - name: IAM_CLIENT_ID
          value: {{.Values.OAUTH.ClientID}}
        - name: IAM_CLIENT_SECRET
          value: {{.Values.OAUTH.ClientSecret}} 
        - name: IAM_REFRESH_TOKEN
          value: {{.Values.OAUTH.RefreshToken}}
        - name: IAM_VK_AUD
          value: {{.Values.OAUTH.Audience}}
        - name: IAM_VK_AUD
          value: {{.Values.OAUTH.Audience}}
        - name: IAM_GRANT_TYPE 
          value: {{.Values.OAUTH.GrantType}}
        - name: TOKEN_PATH
          value: /opt/interlink/token
        command: 
        - python3
        - /opt/refresh.py
        resources:
          limits:
            cpu: 200m
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 300Mi
        volumeMounts:
        - name: token
          mountPath: /opt/interlink
      {{- end }}
      {{- if .Values.sshBastion.enabled }}
      - name: ssh-bastion
        image: "{{ .Values.sshBastion.image }}"
        ports:
        - containerPort: 2222
        env:
        - name: PUBLIC_KEY_FILE
          value: /opt/ssh/authorized_keys 
        - name: USER_NAME
          value: interlink 
        - name: PUBLIC_KEY_URL
          value: {{.Values.sshBastion.clientKeys.keysURL }}
        - name: DOCKER_MODS
          value: linuxserver/mods:openssh-server-ssh-tunnel
        - name: SHELL_NOLOGIN
          value: "true"
        imagePullPolicy: Always
        ports:
        - containerPort: 22
        volumeMounts:
        - name: sockets
          mountPath: /config/sockets
        - name: ssh-keys
          mountPath: /opt/ssh/
        # - name: sshd-config
        #   mountPath: /etc/ssh/sshd_config
        #   subPath: sshd_config
      {{- end }}
      volumes:
      {{- if .Values.sshBastion.enabled }}
      - name: ssh-keys
        secret:
          secretName: {{.Values.nodeName }}-ssh-keys 
      - name: sshd-config
        configMap:
          name: "{{ .Values.nodeName }}-sshd-config"
      {{- end }}
      - name: config
        configMap:
          name: {{ .Values.nodeName }}-virtual-kubelet-config
      - name: token
        hostPath:
          path: /tmp
          type: Directory
      {{- if .Values.interlink.socket }}
      - name: il-config
        configMap:
          name: {{ .Values.nodeName }}-interlink-config
      - name: sockets
        emptyDir: {}  
      {{- end }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{.Values.nodeName }}-ssh-keys
  namespace: {{ .Release.Namespace }}
type: Opaque
data:
  authorized_keys: {{ .Values.sshBastion.clientKeys.authorizedKeys | b64enc }}
---

{{- if .Values.sshBastion.enabled }}
apiVersion: v1
kind: Service
metadata:
  name: ssh-bastion-{{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
spec:
  type: NodePort
  ports:
  - port: 2222 
    nodePort: {{ .Values.sshBastion.port }}
  selector:
    app: {{ .Values.nodeName }}

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ .Values.nodeName }}-sshd-config"
  namespace: {{ .Release.Namespace }}
data:
  sshd_config: |
    #PermitOpen /config/sockets/plugin.sock
    #PermitOpen /config/sockets/interlink.sock
    AllowTcpForwarding yes

{{- end }}

---
